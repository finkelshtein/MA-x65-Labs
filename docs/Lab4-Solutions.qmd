---
title: "Lab 4 - Solutions:  Data frames"
format: 
    html:
        echo: true
        code-fold: true
---

::: hidden
$$
  \renewcommand{\P}{\mathbb{P}}
  \newcommand{\E}{\mathbb{E}}
$$
:::

# How to create data frames

* Data frame is a table with data. 

* Each column of a data frame should contain the data of the same type (e.g. only numeric or only characters), however, different columns may have different types:

```{r}
#| echo: true
#| code-fold: false
df <- data.frame(x = 101:103, y = c('a', 'b', 'c'))
df
```

* Here we create a data frame `df` with two columns: column `x` contains $3$ numbers: $101$, $102$, $103$ (see topic Patterns of [Lab 1](Lab1.qmd)) and column `y` contains three strings "a", "b", and "c". 

* On the left, you can also see numbers $1,2,3$, these are the indexes which number the rows of the frame.

* We will mainly need access to the columns of a data frame. The command has the following simple structure `DataFrameName$ColumnName`, e.g.

```{r}
#| echo: true
#| code-fold: false
df$x
```

Stress that the output is a vector. Similarly,

```{r}
#| echo: true
#| code-fold: false
df$y
```

* The data frame may be very large, and we may need to see its structure without showing the whole data frame. For this we can use function `head(...)`:

```{r}
#| echo: true
#| code-fold: false
x <- 101:10**3
y <- 2*x + 7
df <- data.frame(x, y)
head(df)
```

* By default, `head` shows $6$ rows. One can request more:
```{r}
#| echo: true
#| code-fold: false
head(df,10)
```

* Try commands `ncol(df)`, `nrow(df)`, `dim(df)` to see their outputs.

##
:::{.task}
Find the sum of all values in the column `y` of this data frame `df`.
:::

Check the answer:
```{r}
sum(df$y)
```

# How to import data frames

* Often we need to work with external data stored in some files. A popular format for storing text data (that includes numbers) is CSV-format (stands for "fomma separated values").

##
:::{.task}
Do the following steps:

1. Download file [numbers.csv](numbers.csv) and save it in a directory (folder) on your computer (usually it's "Documents" or "Downloads").

2. Save your R-file your are working with in R-Studio **to the same** directory (folder).

3. Click with right mouse button on the file name at the top of R-Studio window and choose "Set working directory".

OR (instead of 3)

* Go to menu "Session", choose "Set working directory", and then choose "To source file location"

If you did 1-3 correctly, in "Files" tab on the (down) right part of R-Studio you will see your R-file and the downloaded CSV-file in the same directory.

4. Load the saved file by the command

```{r}
#| echo: true
#| code-fold: false
df <- read.csv("numbers.csv")
```

:::

Check yourself:

```{r}
#| echo: true
#| code-fold: false
head(df)
```

##
:::{.task}
It is given that the data in column `x` of "numbers.csv" file are independent values of a random variable $X\sim Exp(\lambda)$. Find the estimate $\hat{\lambda}$ for the parameter $\lambda$ using the method of moments (see Lecture Notes).
:::

:::: {.solution}
Recall that, for $X\sim Exp(\lambda)$,
$$
\E(X)=\frac{1}{\lambda}
$$
The first sample moment (the average) is, for the sample $\{x_1,\ldots,x_n\}$,
$$
\bar{m}_1=\frac{x_1+\ldots+x_n}{n}
$$
and can be found using R-function `mean`. Equating $\bar{m}_1$ and $m_1=\E(X)$, we get
$$
\bar{m}_1= \frac{1}{\lambda}, \qquad \lambda = \frac{1}{\bar{m}_1}.
$$
::::

```{r}
1/mean(df$x)
```

# How to filter data frames

* Suppose we want to select only those rows of the last data frame where the value of `y` is bigger than 5. This condition then has the form: `df$y > 5`. Since `df$y` is a vector, the result of `df$y > 5` will be also a vector of `TRUE` and `FALSE`:

```{r}
#| echo: true
#| code-fold: false
my_condition <- df$y > 5
my_condition[1:6]
```
i.e. the first, second, forth, and sixth values of `y` are bigger than $5$ (and of course many others, we are just looking here for the first $6$). 
The length of `my_condition` is the same as the number of rows in `df`:

```{r}
#| echo: true
#| code-fold: false
length(my_condition) == nrow(df)
```

* The command `df[my_condition,]` (**notice the comma!!!**) will return the data frame which contain only those rows from `df` where $y>5$:

```{r}
#| echo: true
#| code-fold: false
df_cond <- df[my_condition,]
head(df_cond)
```

* Since `df_cond` is a data frame (and the same column names are inheritted from `df`), we can access its columns by `df_cond$x` and `df_cond$y`.

##
:::{.task}
Find the average of all values of `y` from `df` such that the corresponding values of `x` are larger than $1$.
:::

Check your answer:

```{r}
mean(df[df$x > 1,]$y)
```

# Linear models

* Sometimes we may believe that two sets of data are related to each other. The simplest relation is linear, like $y=kx+b$. 

* If one has sets of data $x=(x_1,\ldots,x_n)$ and $y=(y_1,\ldots,y_n)$, one can find $k$ and $b$ which would be the best possible to make $y_i\approx k x_i +b $ for all $i$.

* Usually, it is done using the linear regression method which chooses $k$ and $b$ so that

$$
\sum_{i=1}^n(y_i - (kx_i+b))^2
$$

would be smallest possible (for the given $x$ and $y$).

* In the data frame above, we may suspect that $y$ and $x$ are linearly related:

```{r dev.args = list(bg = 'transparent')}
plot(df$x, df$y)
```

* The corresponding R-code to find optimal $k$ and $b$ is the following:

```{r}
#| echo: true
#| code-fold: false
lm(y ~ x, data = df)
```

* Here `data` is the name of the parameter of function `lm` (stands for "linear model"), and `df` is the data frame which contains columns `x` and `y`. In other words, if columns of `df` would had names `colX` and `colY`, we would write `lm(colY ~ colX, data = df)`.

* The `(Intercept)` corresponds to $b$, and value of `x` here is $k$. One can access the obtained values:

```{r}
#| echo: true
#| code-fold: false
ans <- coef(lm(y ~ x, data = df))
ans
```

and then `ans[1]` is $b$ and `ans[2]` is $k$.

##
:::{.task}
Plot on the same diagram the scatter plot $y$ against $x$ as it is shown above, but in blue color, and plot the line $y=kx+b$ with the found values of $k$ and $b$ (do not copy-paste, use `coef` function) in red colour. (See Lab 3 for plotting two graphs on one diagram). 
:::

```{r dev.args = list(bg = 'transparent')}
x <- df$x
y <- df$y
plot(x, y, col = 'blue')
lines(x, ans[2]*x + ans[1], col = 'red')
```

# Fitting of data

We discussed the maximum likelihood estimator for unknown parameters of the data. One of the ways to use it in R, is to load package `MASS` (all capital letters). The command is then `fitdistr(DataVector, "name_of_distribution")`, where `DataVector` is the vector of values we want to fit, and `"name_of_distribution"` is a string like `"exponential"` or `"gamma"` etc.

##
:::{.task}
1. Install package `MASS` to R-Studio (see [Lab 3](Lab3-Solutions.qmd)).

2. Load package `MASS` in your code (see [Lab 3](Lab3-Solutions.qmd)).

3. Given that the column `x` of the last data frame `df` is exponentially distributed, find the MLE for its rate.
:::

Check the output:

```{r}
#| warning: false
library(MASS)
fitdistr(df$x, "exponential")
```
(the value in brackets shows the possible "level of error" and it can be ignored for now).