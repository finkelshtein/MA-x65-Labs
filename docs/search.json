[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lab Assignments",
    "section": "",
    "text": "Site overview\nThis site contains Lab assignments and their solutions.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Site overview"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html",
    "href": "Lab2-Solutions.html",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "",
    "text": "\\[\n  \\renewcommand{\\P}{\\mathbb{P}}\n  \\newcommand{\\E}{\\mathbb{E}}\n\\]",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section",
    "href": "Lab2-Solutions.html#section",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "2.1 ",
    "text": "2.1 \n\nLet \\(X\\sim Exp(0.1)\\). Find \\(\\P(1&lt;X\\leq3)\\).\n\n\nSolution. We know that (see Equation 1 above)\n\\[\n\\P(1&lt;X\\leq3) = F_X(3) - F_X(1)\n\\]\nTherefore, we can use the code\n\n\nCode\npexp(3, 0.1) - pexp(1, 0.1)\n\n\n[1] 0.1640192\n\n\n\n\nThe survival function \\(S_X(x) = \\P(X&gt;x)\\) can be calculated, of course, from the relation \\(S_X(x) = 1- F_X(x)\\). There is, however, more numerically exact way by using the argument lower.tail = FALSE (or lower.tail = F) for function pexp:\n\n\npexp(0.5, 3,  lower.tail  = F) \n\n[1] 0.2231302\n\n\nthat coincides with\n\n1 - pexp(0.5, 3)\n\n[1] 0.2231302\n\n\nat least in the first 5 decimal figures.\n(Surely, for the exponential distribution one has an explicit simple formula: \\(S_X(x)= e^{-\\lambda x}\\).)",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section-1",
    "href": "Lab2-Solutions.html#section-1",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "2.2 ",
    "text": "2.2 \n\nLet \\(X\\sim Exp(0.3)\\). Plot the graph of \\(S_X(x)\\) for \\(x\\in [0,10]\\) (see Task 5.1 of Lab 1) using pexp function.\n\n\nSolution. Recall that R apply any function to a vector component-wise (entry-wise), i.e. if there is a vector x and a function f, then f(x) will be the vector whose first component is the value of f on the first compnent of x and so on.\n\n\nCode\nx &lt;- seq(0, 10, 0.1)\ny &lt;- pexp(x, 0.3, lower.tail = F)\nplot(x,y, type='l')",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section-2",
    "href": "Lab2-Solutions.html#section-2",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "3.1 ",
    "text": "3.1 \n\nLet \\(X\\sim \\Gamma(3, 2)\\). Find \\(a\\) such that \\(\\P(a\\leq X &lt; 5)=0.4\\). (Hint: find first \\(F_X(a)\\) and then find \\(a\\).) Assign the answer to R variable a.\n\n\nSolution. We have that\n\\[\nF_X(5)-F_X(a) = 0.4,\n\\]\nhence,\n\\[\nF_X(a)=F_X(5)-0.4.\n\\]\n\n\nCode\nfa &lt;- pgamma(5, shape = 3, rate = 2) - 0.4\na &lt;- qgamma(fa, shape = 3, rate = 2)\na\n\n\n[1] 1.546295\n\n\n\n\nTo generate n (independent) random values distributed according to \\(\\Gamma(\\alpha, \\lambda)\\), we use the command rgamma(n, shape = alpha, rate = lambda). The output is a vector (of the length n).\nSince the values are random, if you run the same rgamma command again and again, the output will be different all the time:\n\n\nrgamma(2, shape = 0.1, rate = 0.2)\n\n[1] 6.193271e-11 6.884243e-01\n\n\nand another output for the same input:\n\nrgamma(2, shape = 0.1, rate = 0.2)\n\n[1] 0.047702769 0.000197885\n\n\nTo fix the output, we should “set a seed”: write the code set.seed(m) with any natural number instead of m. For each m, there will be a fixed output. If you change m, the output will also changes.",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section-3",
    "href": "Lab2-Solutions.html#section-3",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "3.2 ",
    "text": "3.2 \n\nSet the seed \\(123\\), i.e. write set.seed(123) before your code. Generate \\(10000\\) values of \\(X\\sim\\Gamma(2,3)\\). Find the mean (average) of these values and assign it to the variable m. You may either use sum function discussed in Lab 1 (and average it) or mean function (use ?mean if experience difficulties).\n\n\n\nCode\nset.seed(123)\nx &lt;- rgamma(10000, shape = 2, rate = 3)\nm &lt;- mean(x)\nm\n\n\n[1] 0.6592689\n\n\nYou may check that this answer will remain the same for each new run, as the randomness is “frozen” now.\n\nNote that, by LLN (the Low of Large Numbers), the obtained mean (i.e. a sample mean) should be close to \\(\\E(X)=\\frac{\\alpha}{\\lambda}\\). And indeed, the received value is close to \\(\\frac23\\approx0.66\\), we may calculate this in R, of course (using abs function for an absolute value of a number):\n\n\nabs(m - 2/3)\n\n[1] 0.00739773",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section-4",
    "href": "Lab2-Solutions.html#section-4",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "4.1 ",
    "text": "4.1 \n\nLet \\(Y\\sim\\ln\\mathcal{N}(0.01,0.2^2)\\). Plot the graph of the density \\(f_Y(x)\\) for \\(x\\in[0,3]\\). Use xlab and ylab arguments of the plot function to set-up the names “x value” and “Density” for the horizontal and vertical axes. Use main argument of the plot function to set-up the title “Normal distribution density” for the whole plot.\n\n\nRemark. To make the graph smother, we will use a smaller step in seq function while defining the x values.\n\n\n\nCode\nx &lt;- seq(0, 3, 0.01)\ny &lt;- dlnorm(x, meanlog = 0.01, sdlog = 0.2)\nplot(x,y, type=\"l\", xlab=\"x value\", ylab=\"Density\", main=\"Log-normal distribution density\")",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab2-Solutions.html#section-5",
    "href": "Lab2-Solutions.html#section-5",
    "title": "Lab 2 - Solutions: Probability Distributions",
    "section": "4.2 ",
    "text": "4.2 \n\nThe hazard function of a random variable \\(X\\) is defined as follows: \\[\nh_X(x) := \\frac{f_X(x)}{1-F_X(x)}.\n\\] Let \\(X\\sim \\mathcal{N}(4, 0.4)\\). Calculate \\(h_X(2)\\).\n\nCheck the answer:\n\n\nCode\nsigma = sqrt(0.4) # square root of sigma^2 = 0.4\ndnorm(2, 4, sigma)/pnorm(2, 4, sigma, lower.tail = F)\n\n\n[1] 0.004253513",
    "crumbs": [
      "Labs - Solutions",
      "Lab 2 - Solutions"
    ]
  },
  {
    "objectID": "Lab1-Solutions.html",
    "href": "Lab1-Solutions.html",
    "title": "Lab 1: Solutions",
    "section": "",
    "text": "\\[\n  \\renewcommand{\\P}{\\mathbb{P}}\n  \\newcommand{\\E}{\\mathbb{E}}\n\\]",
    "crumbs": [
      "Labs - Solutions",
      "Lab 1 - Solutions"
    ]
  },
  {
    "objectID": "Lab1-Solutions.html#section",
    "href": "Lab1-Solutions.html#section",
    "title": "Lab 1: Solutions",
    "section": "4.1 ",
    "text": "4.1 \n\nLet \\(X\\) be the random variable that is the result of throwing a (fair) dice, i.e. \\(X\\) may take either of values \\(1,2,3,4,5,6\\) with equal probabilities \\(\\frac16\\).\n\nDefine vector \\[\nx=(x_1,x_2,\\ldots,x_6)=(1,2,\\ldots,6)\n\\] of values of \\(X\\) and assign it to R-variable x.\nDefine vector \\[\np=(p_1,p_2,\\ldots,p_6)=\\Bigl(\\frac16,\\frac16,\\ldots,\\frac16\\Bigr)\n\\] of the probabilities, and assign it to R-variable p.\nRecall that the expectation of \\(X\\) is \\[\n\\E(X)=\\sum_{i=1}^6 x_ip_i=x_1p_1+\\ldots x_6p_6=x\\cdot p.\n\\] Calculate \\(\\E(X)\\) (using the previously considered functions).\n\n\nCHeck the solution (unfold the code):\n\n\nCode\nx &lt;- seq(1,6)\np &lt;- rep(1/6, 6)\nsum(x*p)\n\n\n[1] 3.5",
    "crumbs": [
      "Labs - Solutions",
      "Lab 1 - Solutions"
    ]
  },
  {
    "objectID": "Lab1-Solutions.html#section-1",
    "href": "Lab1-Solutions.html#section-1",
    "title": "Lab 1: Solutions",
    "section": "4.2 ",
    "text": "4.2 \n\nRecall that the variance of a random variable can be found by the following formulas: \\[\n\\begin{aligned}\\mathrm{Var}(X) &= \\mathbb{E}\\Bigl(\\bigl(X-\\mathbb{E}(X)\\bigr)^2\\Bigr)\\\\\n    &= \\sum_{i=1}^6 \\bigl(x_i-\\mathbb{E}(X)\\bigr)^2p_i\\end{aligned}.\n\\] Find \\(\\mathrm{Var}(X)\\) (using the previously considered functions).\n\nCheck the answer:\n\n\nCode\nsum(p*(x-sum(x*p))**2)\n\n\n[1] 2.916667",
    "crumbs": [
      "Labs - Solutions",
      "Lab 1 - Solutions"
    ]
  },
  {
    "objectID": "Lab1-Solutions.html#section-2",
    "href": "Lab1-Solutions.html#section-2",
    "title": "Lab 1: Solutions",
    "section": "4.3 ",
    "text": "4.3 \n\nLet \\(X=(1,2,\\ldots,2024)\\) and \\(Y=(Y_1,\\ldots,Y_{2024})\\) with\n\\[\nY_k = X_1+\\ldots+X_k, \\qquad 1\\leq k\\leq 2024.\n\\]\nFind how many components of \\(Y\\) are bigger than \\(10^6\\). (Hint: remember that True stands for 1).\n\nCheck the answer:\n\n\nCode\nx &lt;- 1:2024\ny &lt;- cumsum(x)\nsum(y&gt;10**6)\n\n\n[1] 611\n\n\n\nSlicing\n\n\nIf x is a vector, to access its component with index i one needs to use x[i]:\n\n\na &lt;- seq(2,20,2)\na[3]\n\n[1] 6\n\n\n\nRemark. Note that the indexation in R starts with 1 (in contrast to e.g. Python).\n\n\nWe can also get a slice of a vector by specifying the range of indexes, e.g.\n\n\na[3:5]\n\n[1]  6  8 10\n\n\n\nThe indexes do not need to follow some order:\n\n\na[c(3,7,1)]\n\n[1]  6 14  2",
    "crumbs": [
      "Labs - Solutions",
      "Lab 1 - Solutions"
    ]
  },
  {
    "objectID": "Lab1-Solutions.html#sec-plotingtask",
    "href": "Lab1-Solutions.html#sec-plotingtask",
    "title": "Lab 1: Solutions",
    "section": "5.1 ",
    "text": "5.1 \n\nPlot graph of \\(y=x^2\\) on \\(x\\in[-10,10]\\). (Hint: divide \\([-10,10]\\) on many small pieces and connect values of \\(y\\) at ends of these pieces by straight lines).\n\nCheck the answer:\n\n\nCode\nx &lt;- seq(-10, 10, 0.1)\ny &lt;- x**2\nplot(x,y, type='l')",
    "crumbs": [
      "Labs - Solutions",
      "Lab 1 - Solutions"
    ]
  },
  {
    "objectID": "Lab1.html",
    "href": "Lab1.html",
    "title": "Lab 1: Introduction",
    "section": "",
    "text": "\\[\n  \\renewcommand{\\P}{\\mathbb{P}}\n  \\newcommand{\\E}{\\mathbb{E}}\n\\]",
    "crumbs": [
      "Labs - Problems",
      "Lab 1 - Problems"
    ]
  },
  {
    "objectID": "Lab1.html#section",
    "href": "Lab1.html#section",
    "title": "Lab 1: Introduction",
    "section": "4.1 ",
    "text": "4.1 \n\nLet \\(X\\) be the random variable that is the result of throwing a (fair) dice, i.e. \\(X\\) may take either of values \\(1,2,3,4,5,6\\) with equal probabilities \\(\\frac16\\).\n\nDefine vector \\[\nx=(x_1,x_2,\\ldots,x_6)=(1,2,\\ldots,6)\n\\] of values of \\(X\\) and assign it to R-variable x.\nDefine vector \\[\np=(p_1,p_2,\\ldots,p_6)=\\Bigl(\\frac16,\\frac16,\\ldots,\\frac16\\Bigr)\n\\] of the probabilities, and assign it to R-variable p.\nRecall that the expectation of \\(X\\) is \\[\n\\E(X)=\\sum_{i=1}^6 x_ip_i=x_1p_1+\\ldots x_6p_6=x\\cdot p.\n\\] Calculate \\(\\E(X)\\) (using the previously considered functions).\n\n\nCheck the answer.\n\n\n[1] 3.5",
    "crumbs": [
      "Labs - Problems",
      "Lab 1 - Problems"
    ]
  },
  {
    "objectID": "Lab1.html#section-1",
    "href": "Lab1.html#section-1",
    "title": "Lab 1: Introduction",
    "section": "4.2 ",
    "text": "4.2 \n\nRecall that the variance of a random variable can be found by the following formulas: \\[\n\\begin{aligned}\\mathrm{Var}(X) &= \\mathbb{E}\\Bigl(\\bigl(X-\\mathbb{E}(X)\\bigr)^2\\Bigr)\\\\\n    &= \\sum_{i=1}^6 \\bigl(x_i-\\mathbb{E}(X)\\bigr)^2p_i\\end{aligned}.\n\\] Find \\(\\mathrm{Var}(X)\\) (using the previously considered functions).\n\nCheck the answer:\n\n\n[1] 2.916667",
    "crumbs": [
      "Labs - Problems",
      "Lab 1 - Problems"
    ]
  },
  {
    "objectID": "Lab1.html#section-2",
    "href": "Lab1.html#section-2",
    "title": "Lab 1: Introduction",
    "section": "4.3 ",
    "text": "4.3 \n\nLet \\(X=(1,2,\\ldots,2024)\\) and \\(Y=(Y_1,\\ldots,Y_{2024})\\) with\n\\[\nY_k = X_1+\\ldots+X_k, \\qquad 1\\leq k\\leq 2024.\n\\]\nFind how many components of \\(Y\\) are bigger than \\(10^6\\). (Hint: remember that True stands for 1).\n\nCheck the answer:\n\n\n[1] 611\n\n\n\nSlicing\n\n\nIf x is a vector, to access its component with index i one needs to use x[i]:\n\n\na &lt;- seq(2,20,2)\na[3]\n\n[1] 6\n\n\n\nRemark. Note that the indexation in R starts with 1 (in contrast to e.g. Python).\n\n\nWe can also get a slice of a vector by specifying the range of indexes, e.g.\n\n\na[3:5]\n\n[1]  6  8 10\n\n\n\nThe indexes do not need to follow some order:\n\n\na[c(3,7,1)]\n\n[1]  6 14  2",
    "crumbs": [
      "Labs - Problems",
      "Lab 1 - Problems"
    ]
  },
  {
    "objectID": "Lab1.html#section-3",
    "href": "Lab1.html#section-3",
    "title": "Lab 1: Introduction",
    "section": "5.1 ",
    "text": "5.1 \n\nPlot graph of \\(y=x^2\\) on \\(x\\in[-10,10]\\). (Hint: divide \\([-10,10]\\) on many small pieces and connect values of \\(y\\) at ends of these pieces by straight lines).\n\nCheck the answer:",
    "crumbs": [
      "Labs - Problems",
      "Lab 1 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html",
    "href": "Lab2.html",
    "title": "Lab 2: Probability Distributions",
    "section": "",
    "text": "\\[\n  \\renewcommand{\\P}{\\mathbb{P}}\n  \\newcommand{\\E}{\\mathbb{E}}\n\\]",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section",
    "href": "Lab2.html#section",
    "title": "Lab 2: Probability Distributions",
    "section": "2.1 ",
    "text": "2.1 \n\nLet \\(X\\sim Exp(0.1)\\). Find \\(\\P(1&lt;X\\leq3)\\).\n\nCheck the answer.\n\n\n[1] 0.1640192\n\n\n\nThe survival function \\(S_X(x) = \\P(X&gt;x)\\) can be calculated, of course, from the relation \\(S_X(x) = 1- F_X(x)\\). There is, however, more numerically exact way by using the argument lower.tail = FALSE (or lower.tail = F) for function pexp:\n\n\npexp(0.5, 3,  lower.tail  = F) \n\n[1] 0.2231302\n\n\nthat coincides with\n\n1 - pexp(0.5, 3)\n\n[1] 0.2231302\n\n\nat least in the first 5 decimal figures.\n(Surely, for the exponential distribution one has an explicit simple formula: \\(S_X(x)= e^{-\\lambda x}\\).)",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section-1",
    "href": "Lab2.html#section-1",
    "title": "Lab 2: Probability Distributions",
    "section": "2.2 ",
    "text": "2.2 \n\nLet \\(X\\sim Exp(0.3)\\). Plot the graph of \\(S_X(x)\\) for \\(x\\in [0,10]\\) (see Task 5.1 of Lab 1) using pexp function.\n\nCheck the answer:",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section-2",
    "href": "Lab2.html#section-2",
    "title": "Lab 2: Probability Distributions",
    "section": "3.1 ",
    "text": "3.1 \n\nLet \\(X\\sim \\Gamma(3, 2)\\). Find \\(a\\) such that \\(\\P(a\\leq X &lt; 5)=0.4\\). (Hint: find first \\(F_X(a)\\) and then find \\(a\\).) Assign the answer to R variable a.\n\nCheck the answer:\n\na\n\n[1] 1.546295\n\n\n\nTo generate n (independent) random values distributed according to \\(\\Gamma(\\alpha, \\lambda)\\), we use the command rgamma(n, shape = alpha, rate = lambda). The output is a vector (of the length n).\nSince the values are random, if you run the same rgamma command again and again, the output will be different all the time:\n\n\nrgamma(2, shape = 0.1, rate = 0.2)\n\n[1] 0.0004296262 0.0026047464\n\n\nand another output for the same input:\n\nrgamma(2, shape = 0.1, rate = 0.2)\n\n[1] 2.384074e-02 5.141853e-05\n\n\nTo fix the output, we should “set a seed”: write the code set.seed(m) with any natural number instead of m. For each m, there will be a fixed output. If you change m, the output will also changes.",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section-3",
    "href": "Lab2.html#section-3",
    "title": "Lab 2: Probability Distributions",
    "section": "3.2 ",
    "text": "3.2 \n\nSet the seed \\(123\\), i.e. write set.seed(123) before your code. Generate \\(10000\\) values of \\(X\\sim\\Gamma(2,3)\\). Find the mean (average) of these values and assign it to the variable m. You may either use sum function discussed in Lab 1 (and average it) or mean function (use ?mean if experience difficulties).\n\nCheck the answer:\n\nm\n\n[1] 0.6592689\n\n\nYou may check that this answer will remain the same for each new run, as the randomness is “frozen” now.\n\nNote that, by LLN (the Low of Large Numbers), the obtained mean (i.e. a sample mean) should be close to \\(\\E(X)=\\frac{\\alpha}{\\lambda}\\). And indeed, the received value is close to \\(\\frac23\\approx0.66\\), we may calculate this in R, of course (using abs function for an absolute value of a number):\n\n\nabs(m - 2/3)\n\n[1] 0.00739773",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section-4",
    "href": "Lab2.html#section-4",
    "title": "Lab 2: Probability Distributions",
    "section": "4.1 ",
    "text": "4.1 \n\nLet \\(Y\\sim\\ln\\mathcal{N}(0.01,0.2^2)\\). Plot the graph of the density \\(f_Y(x)\\) for \\(x\\in[0,3]\\). Use xlab and ylab arguments of the plot function to set-up the names “x value” and “Density” for the horizontal and vertical axes. Use main argument of the plot function to set-up the title “Normal distribution density” for the whole plot.\n\nCheck the output (to make the graph smother, use smaller step in seq function while defining the x values).",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  },
  {
    "objectID": "Lab2.html#section-5",
    "href": "Lab2.html#section-5",
    "title": "Lab 2: Probability Distributions",
    "section": "4.2 ",
    "text": "4.2 \n\nThe hazard function of a random variable \\(X\\) is defined as follows: \\[\nh_X(x) := \\frac{f_X(x)}{1-F_X(x)}.\n\\] Let \\(X\\sim \\mathcal{N}(4, 0.4)\\). Calculate \\(h_X(2)\\).\n\nCheck the answer:\n\n\n[1] 0.004253513",
    "crumbs": [
      "Labs - Problems",
      "Lab 2 - Problems"
    ]
  }
]