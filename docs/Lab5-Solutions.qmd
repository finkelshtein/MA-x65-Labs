---
title: "Lab 5 - Solutions:  Kaplan–Meier estimate of the survival functions and Cox regression model"
format: 
    html:
        echo: true
        code-fold: true
---

::: hidden
$$
  \renewcommand{\P}{\mathbb{P}}
  \newcommand{\E}{\mathbb{E}}
$$
:::


# Reminder about data frames

##
:::{.task}
Download [hm.csv](hm.csv) file, store it at the variable `df`, and show first rows of the data set. Check the output.
:::

```{r}
df <- read.csv("hm.csv")
head(df)
```

As you can see, this data frame contains some data about patients, who were in a trial. Column "time" tells us how many full months the trial took place place for each patient (we know that it's "months" time units looking at the last two columns: "entdate" is the dat of the start of the trial for a patient, and the "enddate" is the date of the end of the trial). Column "age"  contains obviously their ages. Column "drug" tells us whether they got some medicine effect of which we investigate ($0$ means no, $1$ means yes). Column "status" tells us their status at the end of the trial: $1$ stands for "dead" (because of the drug received), $0$ means "not dead because of the drug", i.e. censored (excluded from the trial, e.g. recovered and dismissed, or dead by another reason non related to the drug, or something else).

##
:::{.task}
Find the mean age of the participants of the trial. Check the answer
:::
```{r}
mean(df$age)
```

##
:::{.task}
Find the number of entries (rows) in the data frame. Check the answer:
:::

```{r}
length(df$age)
```

# Kaplan–Meier estimate 

To build the Kaplan-Meier estimate of the survival function based on the data, we will use package `survival`. Install it, using menu `Tools` in R Studio and then choosing `Install Packages` item. Load the installed package in your code:

```{r}
#| echo: true
#| code-fold: false
library(survival)
```

First, we need to "label" the data, explaining which entries are censored. For this we use the function `Surv` (notice the first capital letter!) which has (at least) two arguments, e.g. `Surv(time, status)`. Here `time` is a vector containing the data (normally, moments of time), in the example above this data is in the column `df$time`. Next, `status` in the `Surv` function is e.g. a vector of 0/1 or 1/2 where the larger number (1 for 0/1 or 2 for 1/2) means the death because of the considered reason (drug in this example). In our example, we have for this the column `df$status`. The output is as follows:

```{r}
#| echo: true
#| code-fold: false
Surv(df$time, df$status)
```

As you can see all censored moments of time got "+" label. Note that the output of `Surv` function is the so-called "survival object" which has some special internal structure used by R, what we see above is just a visual representation.

Next, to build the Kaplan-Meier estimate of the survival function based on the given data, we use function `survfit`:

```{r}
#| echo: true
#| code-fold: false
sf <- Surv(df$time, df$status)
km <- survfit(sf ~ 1)
km
```

The symbols `~ 1` means that we want to build the Kaplan-Meier estimate for the whole (non-censored) data from the data frame regardless of other covariates (characteristics) like age or whether the patient got the drug. The output of `survfit` (which we stored in `km` variable) tells us that for $n=100$ patients only $80$ events happened (meaning, in this example, non-censored deaths, i.e. deaths because fo the drug). Again, the output of `survfit` (stored in `km`) contains more information, we se only part of it. The usage of this outpus is as follows:

First, we can plot the Kaplan-Meier estimate:
```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
plot(km)
```

The solid (middle) line here is actually the graph of the the Kaplan-Meier estimate for the survival function for the given data. The dashed lines show the boundaries of the $0.95$-confidence interval for such survival functions. It means that the given data is, obviously, just a sample from some large population of patients which got this drug in similar circumnstances (e.g. after the same decease or the same surtgery etc.). If we (hypothetically) would take a large number of samples from this populations (all samples should be of the same length $100$ like in the our example), and if we would plot the Kaplan-Meier estimates for the survival functions in each such sample, then $95$% of these curves would be in the area bounded by the dashed curves on the plot above. 

Note that the value $0.95$ for the confidence interval is the default value, and it can be changed, e.g.
```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
plot(survfit(sf ~ 1), conf.int = 0.99)
```
As you can see, the area is now "wider" as it should cover a larger number of samples ($99$%).


Next, we can use the output of `survfit` to investigate numerical values of the Kaplan-Meier estimate:
```{r}
#| echo: true
#| code-fold: false
summary(km)
```

In the output of `summary`, column `time` contains the times (the lengths of trials) when non-cesored deaths happened. Column `n.risk` contains numer of patients who were still under investigation at those times (more precisely, right before those times), and `n.event` is the number of non-censored deaths which happened at those times. The column `survival` contains the desired values of the Kaplan-Meier estimate, i.e.

$$
\hat{S}(k)=\mathtt{survival}(\mathtt{time} = k) = \prod_{j\leq k}\biggl( 1-\frac{\mathtt{n.event}(\mathtt{time}=j)}{\mathtt{n.risk}(\mathtt{time}=j)} \biggr).
$$

For example, the estimate for the probability that a patient would survive at least $38$ months (after the considered event, say, surgery or desease) is $0.1245$. Indeed, since $38$ is between $36$ abd $43$ which are present in the `time` column and the estiamte for the survival function is constant between the given moments of time, then

$$
\hat{S}(38)=\hat{S}(36)= 0.1245.
$$

##
:::{.task}
Find out how likely, for the given data, is to survive at least $17$ months than at least $51$ months. Check your answer.
:::

```{r}
0.2325/0.1090
```

# Kaplan–Meier estimate for covariates

Suppose now we want to get Kaplan–Meier estimates for survival functions separately for those who got drugs and those who didn't. Instead of writing `~ 1` in `survfit` function discussed above, we will write `~ df$drug`:
```{r}
#| echo: true
#| code-fold: false
sf <- Surv(df$time, df$status)
kmdrug <- survfit(sf ~ df$drug)
kmdrug
```

Hence, there are $51$ patients who didn't get drug and $42$ of them aparently died being non-sensored; whereas, there are $49$ patients who got drug and $38$ of them aparently died being non-sensored.

We can plot both survival functions at once:
```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
plot(kmdrug)
```
The problem is only that we do not see which curves is for whom. We can use e.g. different colours and, most importantly, a legend for the plot:

```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
plot(kmdrug, col=c("blue", "red"))
legend("topright", legend=c("drug=0","drug=1"), col=c("blue", "red"), lty=c(1,1))
```

Note that `lty` inside legend tells to draw lines in the legend, where `1` stands for a solid line (it's a common agreement in R). For e.g. a dashed line, it would be $2$.

##
:::{.task}
Plot the previous plot with legend so that `drug=0` whould be in dashed `seagreen` colour (both on plot and in legend) and denoted by "No drug", and `drug=1` would be in solid orange and denoted "drug".
:::

```{r dev.args = list(bg = 'transparent')}
plot(kmdrug, col=c("seagreen", "orange"), lty = c(2,1))
legend("topright", legend=c("No drug","Drug"),  col=c("seagreen", "orange"), lty = c(2,1))
```

# Embedded data frames

The data frame `lung` is embedded into `survival` package. You can get information about this data frame by typing in the console `?lung`. 

Note that instead of writing e.g.
```{r}
#| echo: true
#| code-fold: false
kmlung <- survfit(Surv(lung$time, lung$status) ~ lung$sex)
kmlung
```
one can write
```{r}
#| echo: true
#| code-fold: false
kmlung <- survfit(Surv(time, status) ~ sex, data = lung)
kmlung
```
that is more compact. 

##
:::{.task}
Write the code for the following plot:
:::
```{r dev.args = list(bg = 'transparent')}
plot(kmlung,col=c("blue", "red"))
legend("topright", legend=c("Male","Female"), col=c("blue", "red"), lty=c(1,1))
```

Surely, there numerous R packages which can make plots more nice. For example, may install and load `survminer` package:

```{r, dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
#| warning: false
library(survminer)
ggsurvplot(kmlung)
```
Here "strata" is a synonym for "covariate". Moreover, by specifying `conf.int` one can also include the confidence intervals **for both** values of the covariate:
```{r}
#| echo: true
#| code-fold: false
ggsurvplot(kmlung, conf.int = 0.95)
```

Note also that if we define `kmlung` **without** `data = lung` then `ggsurvplot` **must include** `data = lung`:
i.e. the full command would be `ggsurvplot(survfit(Surv(lung$time, lung$status) ~ lung$sex), conf.int = 0.95)`.

 

# Cox regression model

In the above, one had two different estimators for survival functions corresponding to different categories (different values of the covariate `sex`). The Cox regression model is effective to see a unified estimator for the survival function for both categories.

Recall that the Cox model for one covariate takes the form $$ \lambda(t,z)=\lambda_0(t)e^{\beta z}, $$ where $\beta\in\mathbb{R}$. In our case, looking at `?lung`, $z\in\{1,2\}$, where $z=1$ stands for male and $z=2$ stands for female.

Function `coxph` calculates the estimate for the parameters $\beta$ and has the same arguments as `survfit` considered above:
```{r}
#| echo: true
#| code-fold: false
fit <- coxph(Surv(time, status)~sex, data=lung)
fit
```

Then, the ratio of hazard rates 
$$ \frac{\lambda(t,\mathrm{female})}{\lambda(t,\mathrm{male})}=\frac{\lambda_0(t)e^{2\beta}}{\lambda_0(t)e^{\beta}}=e^{\beta}. $$

In the output of `fit`, the value of `coef` stands for the maximal likelihood estimator (which we denoted as $\beta^*$ on lectures), thus, for the maximal likelihood, looking at the value of `exp(coef)`  
$$  
\frac{\lambda(t,\mathrm{female})}{\lambda(t,\mathrm{male})} = 0.5880,  
$$  
In other words, based on the data set `lung` females with advanced lung cancer has approximately $0.59$ times less hazard rates (a.k.a. the force of mortality) than males (calculated at the same moments of time under the treatment).

Note that the command `summary(fit)` provides more detailed information. In particular, it includes also `exp(-coef)` that is the inverse ratio:
$$ 
\frac{\lambda(t,\mathrm{male})}{\lambda(t,\mathrm{female})}=e^{-\beta}. 
$$ 
(Surely, it can be obtained manually as the reciprocal: `1/0.5880=1.70068`).

In the above, we dealt with one covariate, `sex`. To deal with several, the corresponding names should be added, e.g. `~sex+age`: 
```{r}
#| echo: true
#| code-fold: false
fit2 <- coxph(Surv(time, status)~sex+age, data=lung)
fit2
```

Here, if $z_1\in\{1,2\}$ represents sex and $z_2\in\mathbb{N}$ represents the age,
$$ 
\dfrac{\lambda(t,z_1,z_2)}{\lambda(t,\tilde{z}_1,\tilde{z}_2)} =\exp\bigl(\beta_1(z_1-\tilde{z}_1)\bigr)\exp\bigl(\beta_2(z_2-\tilde{z}_2)\bigr). 
$$ 
As a result, the ratio of hazard rates for the same sex and for two subsequent years is 
$$ 
\dfrac{\lambda(t,z_1,z_2+1)}{\lambda(t,z_1,z_2)} = e^{\beta_2} = 1.017191, 
$$ 
i.e. each year increases the hazard rate (again, for the people as in the data set) by approximately $1.7$%.

##
:::{.task}
Find the ratio of the hazard rate for a male aged 70 to a female aged 80 (for the given data set). 
:::

::: {.solution}
Here we need
$$ 
\dfrac{\lambda(t,z_1=1,z_2=70)}{\lambda(t,z_1=2,z_2=80)} = e^{-\beta_1}e^{-10\beta_2}. 
$$ 
:::
From the output of `coxph` above, we have that $e^{\beta_1}=0.598566$ and $e^{\beta_2}=1.017191$, hence, 
$$
e^{-\beta_1}e^{-10\beta_2}=0.598566^{-1}\cdot 1.017191^{-10},
$$
and we can calculate this:

```{r}
(0.598566)**(-1) * 1.017191**(-10)
```

