---
title: "Lab 1: Solutions"
format: 
    html:
        echo: true
        code-fold: true
---

::: hidden
$$
  \renewcommand{\P}{\mathbb{P}}
  \newcommand{\E}{\mathbb{E}}
$$
:::

# About R

:::{.topic}
Links
:::

-   [R](https://en.wikipedia.org/wiki/R_(programming_language)) is a programming language widely used for statistical computing, (big) data analysis, machine learning, and other areas aimed to retrieve, clean, analyze, visualize, and present data.

-   It is a standard (often, default) tool for statisticians, actuaries, biologists, and many others. R is free software, you can download it from [www.r-project.org](https://www.r-project.org/) Links to an external site.and install on your computer/laptop (Windows/Mac OSX/Linux).

-   [RStudio](https://en.wikipedia.org/wiki/RStudio) Links to an external site.is an Integrated Development Environment (IDE) for R that includes various tools for effective and comfortable work with R.

-   You can download the free version of RStudio Desktop from [posit.co](https://posit.co/)

-  You can also use a cloud version of RStudio at [posit.cloud](https://posit.cloud/). 

# Arithmetic operations


-   R can be used as a calculator:

```{r}
#| echo: true
#| code-fold: false
1+2
```

or

```{r}
#| echo: true
#| code-fold: false
2*3
```

-   R provide rounded results with certain number of significant figures (that can be increased)

```{r}
#| echo: true
#| code-fold: false
2/3
```

- We can also use powers:
```{r}
#| echo: true
#| code-fold: false
2**3
```
and BODMAS works
```{r}
#| echo: true
#| code-fold: false
5*2**3
```

Note that `a**b` and `a^b` mean the same.

- We can also check some equalities or inequalities with R:
```{r}
#| echo: true
#| code-fold: false
4**2 == 2**4
```
or
```{r}
#| echo: true
#| code-fold: false
24 ** 23 > 23 ** 24
```

:::{.remark}
Remember that `TRUE` is just `1` and `FALSE` is just `0`.
:::

# Vectors

-   One of the basic and widely used data types in R is *vectors*. To create a vector, one uses function `c(...)`:

```{r}
#| echo: true
#| code-fold: false
c(2,7,4,1,3)
```

-   One can, of course, assign the result to a variable. A good style is to use `<-` instead of `=` for the assigning (though the latter will not lead to a mistake in the most of cases). The RStudio shortcut for this is `Alt -`.

```{r}
#| echo: true
#| code-fold: false
a <- c(2,7,4,1,3)
```

-   Operations with vectors are made component-wise. For multiplication on a scalar, it is as expected:

```{r}
#| echo: true
#| code-fold: false
2*a
```

-   However, multiplication of vectors is also component-wise: if

```{r}
#| echo: true
#| code-fold: false
b <- c(5,10,20,15,10)
```

then

```{r}
#| echo: true
#| code-fold: false
a*b
```

-   Naturally, then one has that

```{r}
#| echo: true
#| code-fold: false
a**2
```

- We can compare vectors component-wise:
```{r}
#| echo: true
#| code-fold: false
c(1,2) < c(2,3)
```
and
```{r}
#| echo: true
#| code-fold: false
c(1,2) < c(1,3)
```
Moreover, one can compare vector with a number, in this case, we compare **each** vector's component with that number:
```{r}
#| echo: true
#| code-fold: false
a**2 > 10
```


:::{.topic}
Patterns
:::

-   If coordinates of a vector follow some pattern, one can use special function to define it

```{r}
#| echo: true
#| code-fold: false
seq(7,94)
```

-   To change the step-size, we use the third argument of function `seq`:

```{r}
#| echo: true
#| code-fold: false
seq(7,94,2)
```

or

```{r}
#| echo: true
#| code-fold: false
seq(1,10,0.2)
```

Strictly speaking, all arguments of the function `seq` (and any other function in R) has special names:
```{r}
#| echo: true
#| code-fold: false
seq(from=1, to=10, by=0.2)
```
However, if we keep the order of arguments, we may omit their names.

On the other hand, we may change the order if needed, but then we need to specify the names:

```{r}
#| echo: true
#| code-fold: false
seq(to=10, from=1, by=0.2)
```
whereas `seq(10,1,0.2)` would lead to an error (as R understands the latter as `seq(to=1, from=10, by=0.2)`).


Also this function has other arguments. You may read more about this (and any other function) by typing `?seq` **in RStudio console**.

- If the step `by` is equal to $\pm1$, there is a shorter form:
```{r}
#| echo: true
#| code-fold: false
1:10
```
or 
```{r}
#| echo: true
#| code-fold: false
10:1
```

-   To get a vector with identical coordinates, we use `rep` function:

```{r}
#| echo: true
#| code-fold: false
rep(1,10)
```

We can also repeat a vector:
```{r}
#| echo: true
#| code-fold: false
rep(1:3,5)
```
or
```{r}
#| echo: true
#| code-fold: false
rep(seq(2,3,0.5), 4)
```

- Finally, if we want to repeat each coordinate of a vector, we use argument `each`:
```{r}
#| echo: true
#| code-fold: false
rep(1:3, each=5)
```
or
```{r}
#| echo: true
#| code-fold: false
rep(seq(2,3,0.5), each=4)
```

# Further operations with vectors

:::{.topic}
Summation
:::

-   We may summarize all vector coordinates by using function `sum`:

```{r}
#| echo: true
#| code-fold: false
a <- seq(1,10)
b <- sum(a)
b
```

i.e. $a=(a_1,\ldots,a_{10})=(1,2,\ldots,10)$ and 

$$
b = \sum_{i=1}^{10} a_i
$$

-   The cumulative sum, in contrast, is a vector:

```{r}
#| echo: true
#| code-fold: false
a <- seq(1,10)
c <- cumsum(a)
c
```

i.e. $c =(c_1,\ldots,c_{10})$, where 

$$
  c_i = \sum_{k=1}^i a_k.
$$

##
:::{.task}

Let $X$ be the random variable that is the result of throwing a (fair) dice, i.e. $X$ may take either of values $1,2,3,4,5,6$ with equal probabilities $\frac16$.

1.  Define vector 
$$
x=(x_1,x_2,\ldots,x_6)=(1,2,\ldots,6)
$$ 
of values of $X$ and assign it to R-variable `x`.

2.  Define vector 
$$
p=(p_1,p_2,\ldots,p_6)=\Bigl(\frac16,\frac16,\ldots,\frac16\Bigr)
$$ 
of the probabilities, and assign it to R-variable `p`.

3.  Recall that the expectation of $X$ is 
$$
\E(X)=\sum_{i=1}^6 x_ip_i=x_1p_1+\ldots x_6p_6=x\cdot p.
$$ 
Calculate $\E(X)$ (using the previously considered functions).
::: 

CHeck the solution (unfold the code):

```{r}
x <- seq(1,6)
p <- rep(1/6, 6)
sum(x*p)
```



##
:::{.task}
Recall that the variance of a random variable can be found by the following formulas: 
$$
\begin{aligned}\mathrm{Var}(X) &= \mathbb{E}\Bigl(\bigl(X-\mathbb{E}(X)\bigr)^2\Bigr)\\
    &= \sum_{i=1}^6 \bigl(x_i-\mathbb{E}(X)\bigr)^2p_i\end{aligned}.
$$
Find $\mathrm{Var}(X)$ (using the previously considered functions). 
:::

Check the answer:
```{r}
sum(p*(x-sum(x*p))**2)
```

## 
:::{.task}
Let $X=(1,2,\ldots,2024)$ and $Y=(Y_1,\ldots,Y_{2024})$ with 

$$
Y_k = X_1+\ldots+X_k, \qquad 1\leq k\leq 2024.
$$

Find how many components of $Y$ are bigger than $10^6$. (*Hint*: remember that `True` stands for `1`).

:::

Check the answer:
```{r}
x <- 1:2024
y <- cumsum(x)
sum(y>10**6)
```

:::{.topic}
Slicing
:::

- If `x` is a vector, to access its component with index `i` one needs to use `x[i]`:
```{r}
#| echo: true
#| code-fold: false
a <- seq(2,20,2)
a[3]
```

:::{.remark}
Note that the indexation in R starts with `1` (in contrast to e.g. Python).
:::

- We can also get a slice of a vector by specifying the range of indexes, e.g.
```{r}
#| echo: true
#| code-fold: false
a[3:5]
```

- The indexes do not need to follow some order:
```{r}
#| echo: true
#| code-fold: false
a[c(3,7,1)]
```

# Plotting

-   To plot values of a vector $y$ against vector $x$, we can use `plot` function, e.g.
```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
x <- 1:16
y <- rep(1:2,8)
plot(x,y)
```

-   To have a graph made by lines, use the following modification

```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false 
plot(x, y, type='l')
```

## {#sec-plotingtask}
:::{.task}
Plot graph of $y=x^2$ on $x\in[-10,10]$. (*Hint:* divide $[-10,10]$ on many small pieces and connect values of $y$ at ends of these pieces by straight lines).
:::

Check the answer:
```{r dev.args = list(bg = 'transparent')}
x <- seq(-10, 10, 0.1)
y <- x**2
plot(x,y, type='l')
```

<!-- # Discrete random variables

-   To generate several *independent identically distributed discrete* random variables, one uses function `sample`.

It has arguments `x` representing the state space (all possible values; note that the name of the argument is `x` regardless of the notation for the variables); `prob` representing the corresponding probabilities; `size` that is the number of the generated random variables, and `replace` that should be setup equal to `TRUE` or just `T`.

-   Let's generate $n=10$ copies of a symmetric Bernoulli random variable $Z$: $$
    \mathbb{P}(Z=1)=\mathbb{P}(Z=-1)=\frac12.
    $$

```{r}
#| echo: true
#| code-fold: false
n <- 10
z <- sample(x=c(-1,1),prob=c(1/2,1/2),size = n, replace = T)
z
```

-   Stress that if we repeat the same command, the values of `z` may change:

```{r}
#| echo: true
#| code-fold: false
z <- sample(x=c(-1,1),prob=c(1/2,1/2),size = n, replace = T)
z
```

-   If we want to fix the output of a random variable, we should type `set.seed(N)` right before the code, where `N` is an arbitrary natural number.

##
:::{.task}

-   Consider now the simple symmetric random walk: $$
    X_0=0, \qquad X_n=\sum_{i=1}^n Z_i.
    $$

-   Vector $X=(X_1,\ldots,X_n)$ can be then obtained using `cumsum` function.

-   Set `set.seed(100)` and choose $n=50$. Get vector $X$.
:::

```{r}
set.seed(100)
n <- 50
z <- sample(x=c(-1,1),prob=c(1/2,1/2),size = n, replace = T)
x <- cumsum(z)
```

Check its $48$-th component:

```{r}
#| echo: true
#| code-fold: false
x[48]
```

:::{.subtask}
 Find the distance from $X_{50}$ to the origin, using function `abs` which return the absolute value of a number. 
:::

CHeck the solution (unfold the code):

```{r}
abs(x[50])
```

# Plotting

-   To plot values of $X_t$ against $t\in\{1,2,\ldots,n\}$, we can use `plot` function

```{r dev.args = list(bg = 'transparent')}
#| echo: true
#| code-fold: false
t <- 1:n
plot(t,x)
```

-   To have a graph made by lines, use the following modification

```{r}
#| echo: true
#| code-fold: false
plot(t,x,type='l')
```

# Functions

-   If we want to change in the commands above the maximum time $n$ or the probability which can be taken by the random variables $Z_i$, we would need to copy-paste the code and change the values. It would be more effective and convenient, if we define a function:

```{r}
#| echo: true
#| code-fold: false
SimpleRW <- function(p,n)
{
  z <- sample(x=c(-1,1),prob=c(1-p,p),size = n, replace = T)
  x <- cumsum(z)
  t <- 1:n
  plot(t,x,type='l',main=paste("Sample path of a simple random walk with p =",p))
}
```

Note that here $\mathbb{P}(X=1)=p$, $\mathbb{P}(X=-1)=1-p$. Also I tweaked `plot` command to include the used value of $p$ in the title of the diagram (you may ignore `main=...` part).

##
:::{.task}
Plot two graphs of $X_t$ for $t\in\{1,\ldots,1000\}$: for $p=0.4$ and for $p=0.6$.
:::

Compare the output (your graphs do not need to be aligned in the same line):

::: columns
::: {.column width="50%"}
```{r}
SimpleRW(0.4,1000)
```
:::

::: {.column width="50%"}
```{r}
SimpleRW(0.6,1000)
```
:::
:::

One can see the trend: in the first case, the probability $q=1-p$ that $Z=-1$ is smaller hence process $X_n$ will go down more often. -->
